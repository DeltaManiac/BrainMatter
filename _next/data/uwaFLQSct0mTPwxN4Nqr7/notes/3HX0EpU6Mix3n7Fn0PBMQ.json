{"pageProps":{"note":{"id":"3HX0EpU6Mix3n7Fn0PBMQ","title":"Binary Tree Traversal","desc":"","updated":1626504708724,"created":1626502788225,"custom":{},"fname":"algos.trees.binary.traversal","type":"note","vault":{"fsPath":"vault"},"contentHash":"6f5aed1584e7b812d18bb5f503c7a70f","links":[],"anchors":{"graph":{"type":"header","text":"Graph","value":"graph","line":7,"column":0,"depth":2},"preorder":{"type":"header","text":"PreOrder","value":"preorder","line":11,"column":0,"depth":1},"root----left----right":{"type":"header","text":"Root --> Left --> Right","value":"root----left----right","line":13,"column":0,"depth":2},"f-b-a-d-c-e-g-i-h":{"type":"header","text":"F B A D C E G I H","value":"f-b-a-d-c-e-g-i-h","line":15,"column":0,"depth":2},"code":{"type":"header","text":"Code","value":"code","line":17,"column":0,"depth":2},"inorder":{"type":"header","text":"InOrder","value":"inorder","line":32,"column":0,"depth":1},"left----root----right":{"type":"header","text":"Left --> Root --> Right","value":"left----root----right","line":34,"column":0,"depth":2},"a-b-c-d-e-f-g-i-j":{"type":"header","text":"A B C D E F G I J","value":"a-b-c-d-e-f-g-i-j","line":36,"column":0,"depth":2},"code-1":{"type":"header","text":"Code","value":"code-1","line":38,"column":0,"depth":2},"post-order":{"type":"header","text":"Post Order","value":"post-order","line":53,"column":0,"depth":1},"left----right----root":{"type":"header","text":"Left --> Right --> Root","value":"left----right----root","line":55,"column":0,"depth":2},"a-c-e-d-b-h-i-g-f":{"type":"header","text":"A C E D B H I G F","value":"a-c-e-d-b-h-i-g-f","line":57,"column":0,"depth":2},"code-2":{"type":"header","text":"Code","value":"code-2","line":59,"column":0,"depth":2},"iterative-tree":{"type":"header","text":"Iterative Tree","value":"iterative-tree","line":74,"column":0,"depth":1},"use-stack":{"type":"header","text":"Use Stack","value":"use-stack","line":76,"column":0,"depth":2},"level-order":{"type":"header","text":"Level Order","value":"level-order","line":83,"column":0,"depth":1},"use-queue":{"type":"header","text":"Use Queue","value":"use-queue","line":85,"column":0,"depth":2},"f-b-g-a-d-i-c-e-h":{"type":"header","text":"F, B G, A D I, C E H","value":"f-b-g-a-d-i-c-e-h","line":92,"column":0,"depth":2},"code-3":{"type":"header","text":"Code","value":"code-3","line":94,"column":0,"depth":2}},"children":[],"parent":"FYompRqwHhSWOGvRdKWBt","data":{}},"body":"<h1 id=\"binary-tree-traversal\">Binary Tree Traversal<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-tree-traversal\"></a></h1>\n<h2 id=\"graph\">Graph<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#graph\"></a></h2>\n<p><img src=\"/assets/images/2021-07-17-12-08-23.png\"></p>\n<h1 id=\"preorder\">PreOrder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#preorder\"></a></h1>\n<h2 id=\"root----left----right\">Root --> Left --> Right<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#root----left----right\"></a></h2>\n<h2 id=\"f-b-a-d-c-e-g-i-h\">F B A D C E G I H<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-b-a-d-c-e-g-i-h\"></a></h2>\n<h2 id=\"code\">Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">preorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    res<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>left<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>preorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>preorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>\n<h1 id=\"inorder\">InOrder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#inorder\"></a></h1>\n<h2 id=\"left----root----right\">Left --> Root --> Right<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#left----root----right\"></a></h2>\n<h2 id=\"a-b-c-d-e-f-g-i-j\">A B C D E F G I J<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-b-c-d-e-f-g-i-j\"></a></h2>\n<h2 id=\"code-1\">Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code-1\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">inorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>left<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>inorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>inorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>\n<h1 id=\"post-order\">Post Order<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#post-order\"></a></h1>\n<h2 id=\"left----right----root\">Left --> Right --> Root<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#left----right----root\"></a></h2>\n<h2 id=\"a-c-e-d-b-h-i-g-f\">A C E D B H I G F<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-c-e-d-b-h-i-g-f\"></a></h2>\n<h2 id=\"code-2\">Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code-2\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">postorderTraversal</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    res<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>left<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>postorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> root<span class=\"token punctuation\">.</span>right<span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> res <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>postorderTraversal<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span>\n    res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>\n<h1 id=\"iterative-tree\">Iterative Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterative-tree\"></a></h1>\n<h2 id=\"use-stack\">Use Stack<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#use-stack\"></a></h2>\n<ol>\n<li>Push Root to stack</li>\n<li>Pop From Stack</li>\n<li>Push Popped Item left tree</li>\n<li>Push Popped Item right tree</li>\n</ol>\n<h1 id=\"level-order\">Level Order<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#level-order\"></a></h1>\n<h2 id=\"use-queue\">Use Queue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#use-queue\"></a></h2>\n<ol>\n<li>Take Node</li>\n<li>Push Children into Queue</li>\n<li>Remove From Queue</li>\n<li>Go to Step 1</li>\n</ol>\n<h2 id=\"f-b-g-a-d-i-c-e-h\">F, B G, A D I, C E H<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#f-b-g-a-d-i-c-e-h\"></a></h2>\n<h2 id=\"code-3\">Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code-3\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">levelOrder</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">:</span> TreeNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    res<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">,</span> flag<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> queue<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ptr <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            temp<span class=\"token operator\">+=</span><span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> ptr<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">:</span> queue<span class=\"token operator\">+=</span><span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> ptr<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">:</span> queue<span class=\"token operator\">+=</span><span class=\"token punctuation\">[</span>ptr<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">]</span>\n        res<span class=\"token operator\">+=</span><span class=\"token punctuation\">[</span>temp<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>flag<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        temp<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        flag <span class=\"token operator\">=</span> flag<span class=\"token operator\">*</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> res\n</code></pre>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}