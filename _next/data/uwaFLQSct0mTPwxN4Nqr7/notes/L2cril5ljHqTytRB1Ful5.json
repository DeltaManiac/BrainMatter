{"pageProps":{"note":{"id":"L2cril5ljHqTytRB1Ful5","title":"Day 1","desc":"","updated":1609049130527,"created":1609002966621,"nav_order":1,"custom":{"nav_order":1},"fname":"aoc.2015.d1","type":"note","vault":{"fsPath":"vault"},"contentHash":"74ca16fce7cacb4d36c000ee040a911a","links":[],"anchors":{"not-quite-lisp":{"type":"header","text":"Not Quite Lisp","value":"not-quite-lisp","line":8,"column":0,"depth":2},"part-i":{"type":"header","text":"Part I","value":"part-i","line":12,"column":0,"depth":2},"solution":{"type":"header","text":"Solution","value":"solution","line":36,"column":0,"depth":2},"part-ii":{"type":"header","text":"Part II","value":"part-ii","line":55,"column":0,"depth":2},"solution-1":{"type":"header","text":"Solution","value":"solution-1","line":69,"column":0,"depth":2}},"children":[],"parent":"nR8UBV96SJ5mwTb2gLMzw","data":{}},"body":"<h1 id=\"day-1\">Day 1<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#day-1\"></a></h1>\n<h2 id=\"not-quite-lisp\">Not Quite Lisp<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#not-quite-lisp\"></a></h2>\n<p>Santa was hoping for a white Christmas, but his weather machine's \"snow\" function is powered by stars, and he's fresh out! To save Christmas, he needs you to collect fifty stars by December 25th.</p>\n<h2 id=\"part-i\">Part I<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-i\"></a></h2>\n<p>Santa is trying to deliver presents in a large apartment building, but he can't find the right floor - the directions he got are a little confusing.\nHe starts on the ground floor (floor <code>0</code>) and then follows the instructions one character at a time.</p>\n<p>An opening parenthesis, <code>(</code>, means he should go up one floor, and a closing parenthesis, ), means he should go down one floor.</p>\n<p>The apartment building is very tall, and the basement is very deep; he will never find the top or bottom floors.</p>\n<p>For example:</p>\n<blockquote>\n<p><code>(())</code> and <code>()()</code> both result in floor <code>0</code>.</p>\n<p><code>(((</code> and <code>(()(()(</code> both result in floor <code>3</code>.</p>\n<p><code>))(((((</code> also results in floor <code>3</code>.</p>\n<p><code>())</code> and <code>))(</code> both result in floor <code>-1</code> (the first basement\nlevel).</p>\n<p><code>)))</code> and <code>)())())</code> both result in floor <code>-3</code>.</p>\n</blockquote>\n<p>To what floor do the instructions take Santa?</p>\n<h2 id=\"solution\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution\"></a></h2>\n<p>The easiest way to solve this problem would be to split the input string into chars and iterate over each character.</p>\n<p>After that we use the <a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold\">iterator::fold</a> method of the iterator over the characters.</p>\n<p>For each <code>(</code> we increment a sum value by 1 and for ')' we decrement a sum value by 1.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[aoc(day1, part1)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    input<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fold</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>sum<span class=\"token punctuation\">,</span> c<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">match</span> c <span class=\"token punctuation\">{</span>\n        <span class=\"token char\">'('</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token char\">')'</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"part-ii\">Part II<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-ii\"></a></h2>\n<p>Now, given the same instructions, find the position of the first character that causes him to enter the basement (floor -1).</p>\n<p> The first character in the instructions has position 1, the second character has position 2, and so on.</p>\n<p>For example:</p>\n<blockquote>\n<p><code>)</code> causes him to enter the basement at character position <code>1</code>.</p>\n<p><code>()())</code> causes him to enter the basement at character position <code>5</code>.</p>\n</blockquote>\n<p>What is the position of the character that causes Santa to first enter the basement?</p>\n<h2 id=\"solution-1\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution-1\"></a></h2>\n<p>The easiest way to solve this would be be to keep a check if the sum value every becomes less than 0.</p>\n<p>This condition can be easily identified by using the <a href=\"https://doc.rust-lang.org/std/primitive.isize.html#method.checked_sub\">checked_sub</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[aoc(day1, part2)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> sum<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enumerate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> c <span class=\"token punctuation\">{</span>\n            <span class=\"token char\">'('</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n            <span class=\"token char\">')'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">.</span><span class=\"token function\">checked_sub</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    sum <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">unreachable!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}