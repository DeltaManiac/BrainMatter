{"pageProps":{"note":{"id":"wkazkGBnDMXJcyTJckPiu","title":"Producer","desc":"","updated":1602919762613,"created":1602919762613,"stub":false,"custom":{"stub":false},"fname":"kafka.producer","type":"note","vault":{"fsPath":"vault"},"contentHash":"192db128de67ad7b7bf391409d84b731","links":[{"type":"wiki","from":{"fname":"kafka.producer","id":"wkazkGBnDMXJcyTJckPiu","vaultName":"vault"},"value":"rust","position":{"start":{"line":21,"column":7,"offset":617},"end":{"line":21,"column":15,"offset":625},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"rust"}},{"type":"wiki","from":{"fname":"kafka.producer","id":"wkazkGBnDMXJcyTJckPiu","vaultName":"vault"},"value":"go","position":{"start":{"line":91,"column":7,"offset":2842},"end":{"line":91,"column":13,"offset":2848},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"go"}},{"from":{"fname":"go","id":"96Hj5nYpnUciwlTenFpoU","vaultName":"vault"},"type":"backlink","position":{"start":{"line":5,"column":1,"offset":17},"end":{"line":5,"column":28,"offset":44},"indent":[]},"value":"kafka.producer"},{"from":{"fname":"kafka","id":"6Wl0i0BjF7yD85uM5RTyK","vaultName":"vault"},"type":"backlink","position":{"start":{"line":21,"column":3,"offset":631},"end":{"line":21,"column":30,"offset":658},"indent":[]},"value":"kafka.producer"},{"from":{"fname":"rust","id":"A6TBKYAcFVjBqZpdbHuaS","vaultName":"vault"},"type":"backlink","position":{"start":{"line":9,"column":1,"offset":65},"end":{"line":9,"column":28,"offset":92},"indent":[]},"value":"kafka.producer"}],"anchors":{"producer":{"type":"header","text":"Producer","value":"producer","line":8,"column":0,"depth":2},"serializer":{"type":"header","text":"Serializer","value":"serializer","line":16,"column":0,"depth":1},"creating-a-producer":{"type":"header","text":"Creating a Producer","value":"creating-a-producer","line":26,"column":0,"depth":1},"in":{"type":"header","text":"In","value":"in","line":28,"column":0,"depth":2},"in-1":{"type":"header","text":"In","value":"in-1","line":98,"column":0,"depth":2}},"children":[],"parent":"6Wl0i0BjF7yD85uM5RTyK","data":{}},"body":"<h1 id=\"producer\">Producer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#producer\"></a></h1>\n<h2 id=\"producer-1\">Producer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#producer-1\"></a></h2>\n<p>Kafka has a binary wire protocol.This means that it is possible for applications to read messages from Kafka or write messages to Kafka simply by sending the correct byte sequences to Kafkaâ€™s network port.</p>\n<p>Key Structure is <code>ProducerRecord</code></p>\n<p><img src=\"/assets/images/2020-10-11-20-37-00.png\"></p>\n<h1 id=\"serializer\">Serializer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#serializer\"></a></h1>\n<p>Converts between wire format and code</p>\n<p><a href=\"https://https://avro.apache.org/docs/current\">Apache Avro</a>\nDefine a common schema for serialization and deserialization\nStore in schema Registry\nStore schema identifier in produced message\n<img src=\"/assets/images/2020-10-11-20-37-15.png\"></p>\n<h1 id=\"creating-a-producer\">Creating a Producer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#creating-a-producer\"></a></h1>\n<h2 id=\"in-rust\">In <a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-rust\"></a></h2>\n<p>Crate : <a href=\"https://crates.io/crates/kafka\">kafka</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// Producer Code</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fmt<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Write</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>time<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">::</span>producer<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Producer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Record</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequiredAcks</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> producer <span class=\"token operator\">=</span> <span class=\"token class-name\">Producer</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_hosts</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">with_ack_timeout</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">with_required_acks</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequiredAcks</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">One</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span>with<span class=\"token operator\">*</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">10</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> <span class=\"token operator\">*</span> <span class=\"token operator\">=</span> <span class=\"token macro property\">write!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">mut</span> buf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// some computation of the message data to be sent</span>\nproducer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Record</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-topic\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">as_bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbuf<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Crate : <a href=\"https://crates.io/crates/rdkafka\">rdkafka</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"> sync <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">produce</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> topic_name<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> producer<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">FutureProducer</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">ClientConfig</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> brokers<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message.timeout.ms\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"5000\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Producer creation error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This loop is non blocking: all messages will be sent one after the other, without waiting</span>\n    <span class=\"token comment\">// for the results.</span>\n    <span class=\"token keyword\">let</span> futures <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>i<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">move</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// The send operation on the topic returns a future, which will be</span>\n            <span class=\"token comment\">// completed once the result or failure from Kafka is received.</span>\n            <span class=\"token keyword\">let</span> delivery_status <span class=\"token operator\">=</span> producer\n                <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token class-name\">FutureRecord</span><span class=\"token punctuation\">::</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>topic_name<span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">payload</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message {}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token macro property\">format!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Key {}\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OwnedHeaders</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"header_key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"header_value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Duration</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_secs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// This will be executed when the result is received.</span>\n            <span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Delivery status for message {} received\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            delivery_status\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span>_<span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// This loop will wait until all delivery statuses have been received.</span>\n    <span class=\"token keyword\">for</span> future <span class=\"token keyword\">in</span> futures <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Future completed. Result: {:?}\"</span><span class=\"token punctuation\">,</span> future<span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>Schema Registry for confluent : <a href=\"https://github.com/gklijs/schema_registry_converter\">https://github.com/gklijs/schema_registry_converter</a></p>\n<p>Confluent Write up : <a href=\"https://www.confluent.io/blog/getting-started-with-rust-and-kafka/\">https://www.confluent.io/blog/getting-started-with-rust-and-kafka/</a></p>\n<hr>\n<h2 id=\"in-go\">In <a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-go\"></a></h2>\n<p>Package : <a href=\"https://github.com/confluentinc/confluent-kafka-go\">Confluent Inc</a></p>\n<pre class=\"language-golang\"><code class=\"language-golang\">func main() {\n\n\tp, err := kafka.NewProducer(&#x26;kafka.ConfigMap{\"bootstrap.servers\": \"localhost\"})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer p.Close()\n\n\t// Delivery report handler for produced messages\n\tgo func() {\n\t\tfor e := range p.Events() {\n\t\t\tswitch ev := e.(type) {\n\t\t\tcase *kafka.Message:\n\t\t\t\tif ev.TopicPartition.Error != nil {\n\t\t\t\t\tfmt.Printf(\"Delivery failed: %v\\n\", ev.TopicPartition)\n\t\t\t\t} else {\n\t\t\t\t\tfmt.Printf(\"Delivered message to %v\\n\", ev.TopicPartition)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}()\n\n\t// Produce messages to topic (asynchronously)\n\ttopic := \"myTopic\"\n\tfor _, word := range []string{\"Welcome\", \"to\", \"the\", \"Confluent\", \"Kafka\", \"Golang\", \"client\"} {\n\t\tp.Produce(&#x26;kafka.Message{\n\t\t\tTopicPartition: kafka.TopicPartition{Topic: &#x26;topic, Partition: kafka.PartitionAny},\n\t\t\tValue:          []byte(word),\n\t\t}, nil)\n\t}\n\n\t// Wait for message deliveries before shutting down\n\tp.Flush(15 * 1000)\n}\n</code></pre>\n<p>Package : <a href=\"https://github.com/segmentio/kafka-go\">SegmentIO</a></p>\n<pre class=\"language-golang\"><code class=\"language-golang\">func producer() {\n\n    topic := \"my-topic\"\n    partition := 0\n\n    conn, _ := kafka.DialLeader(context.Background(), \"tcp\", \"localhost:9092\", topic, partition)\n\n    conn.SetWriteDeadline(time.Now().Add(10*time.Second))\n    conn.WriteMessages(\n    kafka.Message{Value: []byte(\"one!\")},\n    kafka.Message{Value: []byte(\"two!\")},\n    kafka.Message{Value: []byte(\"three!\")},\n    )\n\n    conn.Close()\n}\n</code></pre>\n<p>Package : <a href=\"https://github.com/Shopify/sarama\">Sarama</a></p>\n<pre class=\"language-golang\"><code class=\"language-golang\">//Sync Producer\nfunc newDataCollector(brokerList []string) sarama.SyncProducer {\n\n\t// For the data collector, we are looking for strong consistency semantics.\n\t// Because we don't change the flush settings, sarama will try to produce messages\n\t// as fast as possible to keep latency low.\n\tconfig := sarama.NewConfig()\n\tconfig.Producer.RequiredAcks = sarama.WaitForAll // Wait for all in-sync replicas to ack the message\n\tconfig.Producer.Retry.Max = 10                   // Retry up to 10 times to produce the message\n\tconfig.Producer.Return.Successes = true\n\ttlsConfig := createTlsConfiguration()\n\tif tlsConfig != nil {\n\t\tconfig.Net.TLS.Config = tlsConfig\n\t\tconfig.Net.TLS.Enable = true\n\t}\n\n\t// On the broker side, you may want to change the following settings to get\n\t// stronger consistency guarantees:\n\t// - For your broker, set `unclean.leader.election.enable` to false\n\t// - For the topic, you could increase `min.insync.replicas`.\n\n\tproducer, err := sarama.NewSyncProducer(brokerList, config)\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to start Sarama producer:\", err)\n\t}\n\n\treturn producer\n}\n\n// Async Producer\nfunc newAccessLogProducer(brokerList []string) sarama.AsyncProducer {\n\n\t// For the access log, we are looking for AP semantics, with high throughput.\n\t// By creating batches of compressed messages, we reduce network I/O at a cost of more latency.\n\tconfig := sarama.NewConfig()\n\ttlsConfig := createTlsConfiguration()\n\tif tlsConfig != nil {\n\t\tconfig.Net.TLS.Enable = true\n\t\tconfig.Net.TLS.Config = tlsConfig\n\t}\n\tconfig.Producer.RequiredAcks = sarama.WaitForLocal       // Only wait for the leader to ack\n\tconfig.Producer.Compression = sarama.CompressionSnappy   // Compress messages\n\tconfig.Producer.Flush.Frequency = 500 * time.Millisecond // Flush batches every 500ms\n\n\tproducer, err := sarama.NewAsyncProducer(brokerList, config)\n\tif err != nil {\n\t\tlog.Fatalln(\"Failed to start Sarama producer:\", err)\n\t}\n\n\t// We will just log to STDOUT if we're not able to produce messages.\n\t// Note: messages will only be returned here after all retry attempts are exhausted.\n\tgo func() {\n\t\tfor err := range producer.Errors() {\n\t\t\tlog.Println(\"Failed to write access log entry:\", err)\n\t\t}\n\t}()\n\n\treturn producer\n}\n\ngo func sendMessage(){\n        // Synch\n\t\tpartition, offset, err := s.DataCollector.SendMessage(&#x26;sarama.ProducerMessage{\n\t\t\tTopic: \"important\",\n\t\t\tValue: sarama.StringEncoder(r.URL.RawQuery),\n        })\n        // Async\n        s.AccessLogProducer.Input() &#x3C;- &#x26;sarama.ProducerMessage{\n\t\t\tTopic: \"access_log\",\n\t\t\tKey:   sarama.StringEncoder(r.RemoteAddr),\n\t\t\tValue: entry,\n\t\t}\n}\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a></li>\n<li><a href=\"/notes/6Wl0i0BjF7yD85uM5RTyK\">Kafka</a></li>\n<li><a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a></li>\n</ul>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- ðŸ”­ Iâ€™m currently playing Destiny 2\n- ðŸŒ± Iâ€™m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- ðŸ“« How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- ðŸ˜„ Pronouns: He/Him\n<!-- - âš¡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - ðŸ‘¯ Iâ€™m looking to collaborate on ...\n// - ðŸ¤” Iâ€™m looking for help with ...\n// - ðŸ’¬ Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}