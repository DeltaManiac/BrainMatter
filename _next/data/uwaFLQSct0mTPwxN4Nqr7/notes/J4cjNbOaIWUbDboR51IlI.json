{"pageProps":{"note":{"id":"J4cjNbOaIWUbDboR51IlI","title":"maxDepth","desc":"","updated":1627953310187,"created":1627784241720,"custom":{},"fname":"algos.trees.maxDepth","type":"note","vault":{"fsPath":"vault"},"contentHash":"e86649a376ac4ac768e341647f55f450","links":[{"from":{"fname":"go","id":"96Hj5nYpnUciwlTenFpoU","vaultName":"vault"},"type":"backlink","position":{"start":{"line":11,"column":1,"offset":86},"end":{"line":11,"column":37,"offset":122},"indent":[]},"value":"algos.trees.maxDepth"},{"from":{"fname":"rust","id":"A6TBKYAcFVjBqZpdbHuaS","vaultName":"vault"},"type":"backlink","position":{"start":{"line":15,"column":1,"offset":136},"end":{"line":15,"column":39,"offset":174},"indent":[]},"value":"algos.trees.maxDepth"}],"anchors":{"maximum-depth-of-binary-tree":{"type":"header","text":"Maximum Depth of Binary Tree","value":"maximum-depth-of-binary-tree","line":7,"column":0,"depth":2},"binary-tree":{"type":"header","text":"Binary Tree","value":"binary-tree","line":11,"column":0,"depth":2},"solution":{"type":"header","text":"Solution","value":"solution","line":15,"column":0,"depth":2},"python":{"type":"header","text":"Python","value":"python","line":17,"column":0,"depth":3},"go":{"type":"header","text":"Go","value":"go","line":27,"column":0,"depth":3},"rust":{"type":"header","text":"Rust","value":"rust","line":41,"column":0,"depth":3}},"children":[],"parent":"GHvqJvI4mwQzdaMjrbnHA","data":{}},"body":"<h1 id=\"maxdepth\">maxDepth<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#maxdepth\"></a></h1>\n<h2 id=\"maximum-depth-of-binary-tree\">Maximum Depth of Binary Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#maximum-depth-of-binary-tree\"></a></h2>\n<p>Given the <code>root</code> of a binary tree, return its maximum depth</p>\n<h2 id=\"binary-tree\">Binary Tree<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-tree\"></a></h2>\n<p><img src=\"/assets/images/2021-07-17-12-08-23.png\"></p>\n<h2 id=\"solution\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution\"></a></h2>\n<h3 id=\"python\">Python<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python\"></a></h3>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">:</span>TreeNode<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> root<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>maxDepth<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>self<span class=\"token punctuation\">.</span>maxDepth<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>\n</code></pre>\n<h3 id=\"go\">Go<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#go\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span>\n<span class=\"token string\">\"math\"</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root <span class=\"token operator\">*</span>TreeNode<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">float64</span><span class=\"token punctuation\">(</span><span class=\"token function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>Right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"rust\">Rust<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rust\"></a></h3>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">maxDepth</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">:</span><span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Rc</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">RefCell</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">TreeNode</span><span class=\"token operator\">>></span><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">match</span> root <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">::</span><span class=\"token function\">max_depth</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> r <span class=\"token operator\">=</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">::</span><span class=\"token function\">max_depth</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">borrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>cmp<span class=\"token punctuation\">::</span></span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a></li>\n<li><a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a></li>\n</ul>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}