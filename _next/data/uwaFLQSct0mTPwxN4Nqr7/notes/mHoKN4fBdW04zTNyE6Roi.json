{"pageProps":{"note":{"id":"mHoKN4fBdW04zTNyE6Roi","title":"Day 12","desc":"","updated":1610873551648,"created":1610872529055,"nav_order":12,"custom":{"nav_order":12},"fname":"aoc.2015.d12","type":"note","vault":{"fsPath":"vault"},"contentHash":"8515cfe1af59d8c1223f0636ca01462b","links":[],"anchors":{"day-12-jsabacusframeworkio":{"type":"header","text":"Day 12: JSAbacusFramework.io","value":"day-12-jsabacusframeworkio","line":8,"column":0,"depth":2},"part-i":{"type":"header","text":"Part I","value":"part-i","line":10,"column":0,"depth":1},"solution":{"type":"header","text":"Solution","value":"solution","line":32,"column":0,"depth":2},"without-serde":{"type":"header","text":"Without Serde","value":"without-serde","line":34,"column":0,"depth":2},"with-serde":{"type":"header","text":"With Serde","value":"with-serde","line":71,"column":0,"depth":3},"part-ii":{"type":"header","text":"Part II","value":"part-ii","line":102,"column":0,"depth":2},"solution-1":{"type":"header","text":"Solution","value":"solution-1","line":116,"column":0,"depth":2}},"children":[],"parent":"nR8UBV96SJ5mwTb2gLMzw","data":{}},"body":"<h1 id=\"day-12\">Day 12<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#day-12\"></a></h1>\n<h2 id=\"day-12-jsabacusframeworkio\">Day 12: JSAbacusFramework.io<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#day-12-jsabacusframeworkio\"></a></h2>\n<h1 id=\"part-i\">Part I<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-i\"></a></h1>\n<p>Santa's Accounting-Elves need help balancing the books after a recent order. Unfortunately, their accounting software uses a peculiar storage format. That's where you come in.</p>\n<p>They have a JSON document which contains a variety of things: arrays (<code>[1,2,3]</code>), objects (<code>{\"a\":1, \"b\":2}</code>), numbers, and strings.</p>\n<p> Your first job is to simply find all of the numbers throughout the document and add them together.</p>\n<p>For example:</p>\n<blockquote>\n<p><code>[1,2,3]</code> and <code>{\"a\":2,\"b\":4}</code> both have a sum of <code>6</code>.</p>\n<p><code>[[[3]]] and {\"a\":{\"b\":4},\"c\":-1}</code> both have a sum of <code>3</code>.</p>\n<p><code>{\"a\":[-1,1]} and [-1,{\"a\":1}]</code> both have a sum of <code>0</code>.</p>\n<p><code>[]</code> and <code>{}</code> both have a sum of <code>0</code>.</p>\n</blockquote>\n<p>You will not encounter any strings containing numbers.</p>\n<p>What is the sum of all numbers in the document?</p>\n<h2 id=\"solution\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution\"></a></h2>\n<h2 id=\"without-serde\">Without Serde<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#without-serde\"></a></h2>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> value <span class=\"token operator\">=</span> <span class=\"token number\">0i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> tmp_val <span class=\"token operator\">=</span> <span class=\"token number\">0i32</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> last<span class=\"token punctuation\">:</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">=</span> <span class=\"token char\">'\\x00'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> multiplier <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        value <span class=\"token operator\">+=</span> <span class=\"token keyword\">match</span> ch <span class=\"token punctuation\">{</span>\n            <span class=\"token char\">'0'</span><span class=\"token punctuation\">...</span><span class=\"token char\">'9'</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> last <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span> <span class=\"token punctuation\">{</span>\n                    multiplier <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                tmp_val <span class=\"token operator\">=</span> tmp_val <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n                    <span class=\"token operator\">+</span> <span class=\"token keyword\">match</span> ch<span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">,</span>\n                        <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">panic!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Help! {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token number\">0</span>\n            <span class=\"token punctuation\">}</span>\n            _ <span class=\"token keyword\">if</span> last<span class=\"token punctuation\">.</span><span class=\"token function\">is_digit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> tmp_val <span class=\"token operator\">*</span> multiplier<span class=\"token punctuation\">;</span>\n                tmp_val <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                multiplier <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n                tmp\n            <span class=\"token punctuation\">}</span>\n            _ <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        last <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    value\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"with-serde\">With Serde<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#with-serde\"></a></h3>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> v <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Null</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Bool</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span><span class=\"token function\">as_i64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>use_red <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                max <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[aoc(day11, part1, Serde)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1_serde</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h2 id=\"part-ii\">Part II<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-ii\"></a></h2>\n<p>Uh oh - the Accounting-Elves have realized that they double-counted everything red.</p>\n<p>Ignore any object (and all of its children) which has any property with the value <code>\"red\"</code>. Do this only for objects (<code>{...}</code>), not arrays (<code>[...]</code>).</p>\n<blockquote>\n<p>[1,2,3] still has a sum of 6.</p>\n<p>[1,{\"c\":\"red\",\"b\":2},3] now has a sum of 4, because the middle object is ignored.</p>\n<p>{\"d\":\"red\",\"e\":[1,2,3,4],\"f\":5} now has a sum of 0, because the entire structure is ignored.</p>\n<p>[1,\"red\",5] has a sum of 6, because \"red\" in an array has no effect.</p>\n</blockquote>\n<h2 id=\"solution-1\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution-1\"></a></h2>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">sum</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> v <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Null</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Bool</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n<span class=\"token punctuation\">.</span><span class=\"token function\">as_i64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">into_iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>e<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Value</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token operator\">!</span>use_red <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                max <span class=\"token operator\">+=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> use_red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[aoc(day11, part2, Serde)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2_serde</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">i64</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">from_str</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}