{"pageProps":{"note":{"id":"PeDQmsjlEYcdja9yj2nNL","title":"Consumer","desc":"","updated":1602919741869,"created":1602919741869,"stub":false,"custom":{"stub":false},"fname":"kafka.consumer","type":"note","vault":{"fsPath":"vault"},"contentHash":"f6e340fbbb93b8abfd1ad8429a1b05c2","links":[{"type":"wiki","from":{"fname":"kafka.consumer","id":"PeDQmsjlEYcdja9yj2nNL","vaultName":"vault"},"value":"rust","alias":"Rust","position":{"start":{"line":22,"column":7,"offset":729},"end":{"line":22,"column":20,"offset":742},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"rust"}},{"type":"wiki","from":{"fname":"kafka.consumer","id":"PeDQmsjlEYcdja9yj2nNL","vaultName":"vault"},"value":"go","position":{"start":{"line":102,"column":7,"offset":3458},"end":{"line":102,"column":13,"offset":3464},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"go"}},{"from":{"fname":"go","id":"96Hj5nYpnUciwlTenFpoU","vaultName":"vault"},"type":"backlink","position":{"start":{"line":7,"column":1,"offset":46},"end":{"line":7,"column":28,"offset":73},"indent":[]},"value":"kafka.consumer"},{"from":{"fname":"kafka","id":"6Wl0i0BjF7yD85uM5RTyK","vaultName":"vault"},"type":"backlink","position":{"start":{"line":24,"column":3,"offset":742},"end":{"line":24,"column":30,"offset":769},"indent":[]},"value":"kafka.consumer"},{"from":{"fname":"rust","id":"A6TBKYAcFVjBqZpdbHuaS","vaultName":"vault"},"type":"backlink","position":{"start":{"line":11,"column":1,"offset":94},"end":{"line":11,"column":28,"offset":121},"indent":[]},"value":"kafka.consumer"}],"anchors":{"consumer":{"type":"header","text":"Consumer","value":"consumer","line":8,"column":0,"depth":2},"creating-a-consumer":{"type":"header","text":"Creating a Consumer","value":"creating-a-consumer","line":27,"column":0,"depth":1},"in-rust":{"type":"header","text":"In Rust","value":"in-rust","line":29,"column":0,"depth":2},"in":{"type":"header","text":"In","value":"in","line":109,"column":0,"depth":2},"package--segmentio":{"type":"header","text":"Package : SegmentIO","value":"package--segmentio","line":142,"column":0,"depth":2},"commits":{"type":"header","text":"Commits","value":"commits","line":204,"column":0,"depth":1}},"children":[],"parent":"6Wl0i0BjF7yD85uM5RTyK","data":{}},"body":"<h1 id=\"consumer\">Consumer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#consumer\"></a></h1>\n<h2 id=\"consumer-1\">Consumer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#consumer-1\"></a></h2>\n<ul>\n<li>\n<p>Subscribes to topics and receives message</p>\n</li>\n<li>\n<p>Consumer Group -> method of scaling consumption</p>\n<ul>\n<li>Membership triggered by a <code>JoinGroup</code> call</li>\n<li>First member is the de-facto group leader</li>\n<li>leader assigns partitions to consumers in the consumer group</li>\n<li>Membership is maintained by sending <em>heartbeats</em> at intervals regularly to the <em>group coordinator</em></li>\n<li>Sent during <code>poll</code> and <code>commit</code></li>\n<li>missing heartbeats for a period will trigger rebalance as the consumer is thought to be dead</li>\n</ul>\n</li>\n<li>\n<p><em>Rebalance</em> moving partition ownership from one consumer to another</p>\n<ul>\n<li>high scalability and availability</li>\n<li>creates a short unavailability window</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/assets/images/2020-10-11-20-47-04.png\"></p>\n<h1 id=\"creating-a-consumer\">Creating a Consumer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#creating-a-consumer\"></a></h1>\n<h2 id=\"in-rust\">In <a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-rust\"></a></h2>\n<p>Crate : <a href=\"https://crates.io/crates/kafka\">kafka</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">kafka<span class=\"token punctuation\">::</span>consumer<span class=\"token punctuation\">::</span></span><span class=\"token punctuation\">{</span><span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">FetchOffset</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GroupOffsetStorage</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> consumer <span class=\"token operator\">=</span>\n   <span class=\"token class-name\">Consumer</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_hosts</span><span class=\"token punctuation\">(</span><span class=\"token macro property\">vec!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">with_topic_partitions</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-topic\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">with_fallback_offset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FetchOffset</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Earliest</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">with_group</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my-group\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">with_offset_storage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GroupOffsetStorage</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Kafka</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> ms <span class=\"token keyword\">in</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> m <span class=\"token keyword\">in</span> ms<span class=\"token punctuation\">.</span><span class=\"token function\">messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    consumer<span class=\"token punctuation\">.</span><span class=\"token function\">consume_messageset</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commit_consumed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Crate : <a href=\"https://crates.io/crates/rdkafka\">rdkafka</a></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">consume</span><span class=\"token punctuation\">(</span>brokers<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> group_id<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span> topics<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomContext</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> consumer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">LoggingConsumer</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ClientConfig</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> group_id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> brokers<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.partition.eof\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session.timeout.ms\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"6000\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">//.set(\"statistics.interval.ms\", \"30000\")</span>\n        <span class=\"token comment\">//.set(\"auto.offset.reset\", \"smallest\")</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">set_log_level</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RDKafkaLogLevel</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Debug</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">create_with_context</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Consumer creation failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    consumer\n        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>topics<span class=\"token punctuation\">.</span><span class=\"token function\">to_vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't subscribe to specified topics\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// consumer.start() returns a stream. The stream can be used ot chain together expensive steps,</span>\n    <span class=\"token comment\">// such as complex computations on a thread pool or asynchronous IO.</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> message_stream <span class=\"token operator\">=</span> consumer<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> message_stream<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">match</span> message <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">warn!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Kafka error: {}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> payload <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">payload_view</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">str</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s<span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token macro property\">warn!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error while deserializing message payload: {:?}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token string\">\"\"</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n                <span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key: '{:?}', payload: '{}', topic: {}, partition: {}, offset: {}, timestamp: {:?}\"</span><span class=\"token punctuation\">,</span>\n                      m<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">topic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">timestamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>headers<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span><span class=\"token punctuation\">..</span>headers<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">let</span> header <span class=\"token operator\">=</span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token macro property\">info!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"  Header {:#?}: {:?}\"</span><span class=\"token punctuation\">,</span> header<span class=\"token number\">.0</span><span class=\"token punctuation\">,</span> header<span class=\"token number\">.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                consumer<span class=\"token punctuation\">.</span><span class=\"token function\">commit_message</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>m<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CommitMode</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Async</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<h2 id=\"in-go\">In <a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#in-go\"></a></h2>\n<p>Package : <a href=\"https://github.com/confluentinc/confluent-kafka-go\">Confluent Inc</a></p>\n<pre class=\"language-golang\"><code class=\"language-golang\">func main() {\n\n\tc, err := kafka.NewConsumer(&#x26;kafka.ConfigMap{\n\t\t\"bootstrap.servers\": \"localhost\",\n\t\t\"group.id\":          \"myGroup\",\n\t\t\"auto.offset.reset\": \"earliest\",\n\t})\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tc.SubscribeTopics([]string{\"myTopic\", \"^aRegex.*[Tt]opic\"}, nil)\n\n\tfor {\n\t\tmsg, err := c.ReadMessage(-1)\n\t\tif err == nil {\n\t\t\tfmt.Printf(\"Message on %s: %s\\n\", msg.TopicPartition, string(msg.Value))\n\t\t} else {\n\t\t\t// The client will automatically try to recover from all errors.\n\t\t\tfmt.Printf(\"Consumer error: %v (%v)\\n\", err, msg)\n\t\t}\n\t}\n\n\tc.Close()\n}\n</code></pre>\n<h2 id=\"package--segmentio\">Package : <a href=\"https://github.com/segmentio/kafka-go\">SegmentIO</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#package--segmentio\"></a></h2>\n<pre class=\"language-golang\"><code class=\"language-golang\">func consumer(){\n  r := kafka.NewReader(kafka.ReaderConfig{\n      Brokers:   []string{\"localhost:9092\"},\n      Topic:     \"topic-A\",\n      Partition: 0,\n      MinBytes:  10e3, // 10KB\n      MaxBytes:  10e6, // 10MB\n  })\n  r.SetOffset(42)\n\n  for {\n      m, err := r.ReadMessage(context.Background())\n      if err != nil {\n          break\n      }\n      fmt.Printf(\"message at offset %d: %s = %s\\n\", m.Offset, string(m.Key), string(m.Value))\n  }\n\n  r.Close()\n}\n</code></pre>\n<p>Package : <a href=\"https://github.com/Shopify/sarama\">Sarama</a></p>\n<pre class=\"language-golang\"><code class=\"language-golang\">// ConsumeClaim must start a consumer loop of ConsumerGroupClaim's Messages().\nfunc (consumer *Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {\n\n\t// NOTE:\n\t// Do not move the code below to a goroutine.\n\t// The `ConsumeClaim` itself is called within a goroutine, see:\n\t// https://github.com/Shopify/sarama/blob/master/consumer_group.go#L27-L29\n\tfor message := range claim.Messages() {\n\t\tlog.Printf(\"Message claimed: value = %s, timestamp = %v, topic = %s\", string(message.Value), message.Timestamp, message.Topic)\n\t\tsession.MarkMessage(message, \"\")\n\t}\n\n\treturn nil\n}\n\ngo func() comsumer{\n\t\tdefer wg.Done()\n\t\tfor {\n\t\t\t// `Consume` should be called inside an infinite loop, when a\n\t\t\t// server-side rebalance happens, the consumer session will need to be\n\t\t\t// recreated to get the new claims\n\t\t\tif err := client.Consume(ctx, strings.Split(topics, \",\"), &#x26;consumer); err != nil {\n\t\t\t\tlog.Panicf(\"Error from consumer: %v\", err)\n\t\t\t}\n\t\t\t// check if context was cancelled, signaling that the consumer should stop\n\t\t\tif ctx.Err() != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tconsumer.ready = make(chan bool)\n\t\t}\n\t}()\n\n</code></pre>\n<h1 id=\"commits\">Commits<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#commits\"></a></h1>\n<ul>\n<li>\n<p>Consumers use kafka to track their position in each partition</p>\n</li>\n<li>\n<p><code>commit</code> act of updating current position in kafka</p>\n</li>\n<li>\n<p>message <code>__consumer_offsets</code> topic with the offset for each partition</p>\n</li>\n<li>\n<p>when rebalance each consumer receives a new partition and obtains the latest committed offset from where to start reading</p>\n</li>\n<li>\n<p>Commit Strategy</p>\n<ul>\n<li>\n<p>Automatic</p>\n<ul>\n<li>Done by consumer every 5 seconds configurable</li>\n<li>Commits largest offset from <code>poll</code></li>\n<li>call to <code>poll</code> will always commit the last offset</li>\n<li>results in double processing if <code>rebalance</code> occurs in between a 5 sec window</li>\n</ul>\n</li>\n<li>\n<p>Commit Current Offset</p>\n<ul>\n<li>Gives control to the developer</li>\n<li><code>commitSync</code> triggers commit of the last offset returned by <code>poll</code></li>\n<li>must be called after processing all messages</li>\n<li>Synchronous call blocks the application</li>\n<li>Auto retry till success of non retry-able failure</li>\n</ul>\n</li>\n<li>\n<p>Asynchronous Commit</p>\n<ul>\n<li>Fire and forget till we get a callback</li>\n<li>Does not auto retry as a later commit request might have latest Offset</li>\n</ul>\n</li>\n<li>\n<p>Async + Sync Commit</p>\n<ul>\n<li><code>CommitAsync</code> always</li>\n<li>Trigger a CommitSync just before exit</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a></li>\n<li><a href=\"/notes/6Wl0i0BjF7yD85uM5RTyK\">Kafka</a></li>\n<li><a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a></li>\n</ul>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}