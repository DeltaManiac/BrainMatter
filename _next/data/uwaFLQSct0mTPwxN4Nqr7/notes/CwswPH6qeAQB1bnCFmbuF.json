{"pageProps":{"note":{"id":"CwswPH6qeAQB1bnCFmbuF","title":"Word Search","desc":"","updated":1633169954509,"created":1633168937982,"nav_order":50,"custom":{"nav_order":50},"fname":"algos.dailybyte.d50","type":"note","vault":{"fsPath":"vault"},"contentHash":"499cd48bb469fdc937d3b9d3b097968d","links":[{"type":"wiki","from":{"fname":"algos.dailybyte.d50","id":"CwswPH6qeAQB1bnCFmbuF","vaultName":"vault"},"value":"python","position":{"start":{"line":23,"column":4,"offset":471},"end":{"line":23,"column":14,"offset":481},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"python"}},{"type":"wiki","from":{"fname":"algos.dailybyte.d50","id":"CwswPH6qeAQB1bnCFmbuF","vaultName":"vault"},"value":"go","position":{"start":{"line":56,"column":4,"offset":1388},"end":{"line":56,"column":10,"offset":1394},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"go"}},{"type":"wiki","from":{"fname":"algos.dailybyte.d50","id":"CwswPH6qeAQB1bnCFmbuF","vaultName":"vault"},"value":"rust","position":{"start":{"line":58,"column":4,"offset":1399},"end":{"line":58,"column":12,"offset":1407},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"rust"}}],"anchors":{"problem":{"type":"header","text":"Problem","value":"problem","line":9,"column":0,"depth":1},"":{"type":"header","text":"","value":"","line":30,"column":0,"depth":2},"-1":{"type":"header","text":"","value":"-1","line":63,"column":0,"depth":2},"-2":{"type":"header","text":"","value":"-2","line":65,"column":0,"depth":2}},"children":[],"parent":"hXfo1GFtYfbMpCOVkr1Gp","data":{}},"body":"<h1 id=\"word-search\">Word Search<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#word-search\"></a></h1>\n<h1 id=\"problem\">Problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#problem\"></a></h1>\n<p>This question is asked by Amazon.</p>\n<p> Given a 2D board that represents a word search puzzle and a string word, return whether or the given word can be formed in the puzzle by only connecting cells horizontally and vertically.</p>\n<p>Ex: Given the following board and wordsâ€¦</p>\n<pre><code>board =\n[\n  ['C','A','T','F'],\n  ['B','G','E','S'],\n  ['I','T','A','E']\n]\nword = \"CAT\", return true\nword = \"TEA\", return true\nword = \"SEAT\", return true\nword = \"BAT\", return false\n</code></pre>\n<h2 id=\"python\"><a href=\"/notes/7kyCk8YAkDvIrxLtAUFkG\">Python</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#python\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">exist</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> word\n    self<span class=\"token punctuation\">.</span>found <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>visitedSet <span class=\"token operator\">=</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>found<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>board<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>found <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>found <span class=\"token keyword\">and</span> row <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> col <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> row<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> col<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> board<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">)</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>visitedSet<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>visited <span class=\"token operator\">+=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>visitedSet<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span>row<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span>row<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>col<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">,</span>col<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">,</span>row<span class=\"token punctuation\">,</span>col<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>found<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>visitedSet<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>visited<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<h2 id=\"go\"><a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#go\"></a></h2>\n<h2 id=\"rust\"><a href=\"/notes/A6TBKYAcFVjBqZpdbHuaS\">Rust</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rust\"></a></h2>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- ðŸ”­ Iâ€™m currently playing Destiny 2\n- ðŸŒ± Iâ€™m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- ðŸ“« How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- ðŸ˜„ Pronouns: He/Him\n<!-- - âš¡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - ðŸ‘¯ Iâ€™m looking to collaborate on ...\n// - ðŸ¤” Iâ€™m looking for help with ...\n// - ðŸ’¬ Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}