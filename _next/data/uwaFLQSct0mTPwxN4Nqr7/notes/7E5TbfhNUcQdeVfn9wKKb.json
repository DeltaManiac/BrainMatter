{"pageProps":{"note":{"id":"7E5TbfhNUcQdeVfn9wKKb","title":"Primer","desc":"","updated":1627752610103,"created":1627745030734,"nav_order":1,"custom":{"nav_order":1},"fname":"python.primer","type":"note","vault":{"fsPath":"vault"},"contentHash":"fbbba3825c2c0542f3a6e4360ed0f7ea","links":[],"anchors":{"built-ins":{"type":"header","text":"Built Ins","value":"built-ins","line":13,"column":0,"depth":2},"bool":{"type":"header","text":"Bool","value":"bool","line":27,"column":0,"depth":2},"int":{"type":"header","text":"int","value":"int","line":33,"column":0,"depth":2},"float":{"type":"header","text":"float","value":"float","line":47,"column":0,"depth":2},"sequence-types":{"type":"header","text":"Sequence Types","value":"sequence-types","line":61,"column":0,"depth":2},"list":{"type":"header","text":"list","value":"list","line":67,"column":0,"depth":3},"set-and-frozenset":{"type":"header","text":"set and frozenset","value":"set-and-frozenset","line":79,"column":0,"depth":2},"dicts":{"type":"header","text":"dicts","value":"dicts","line":89,"column":0,"depth":2},"operator-precedence":{"type":"header","text":"Operator precedence","value":"operator-precedence","line":93,"column":0,"depth":2},"built-in-functions":{"type":"header","text":"Built-In Functions","value":"built-in-functions","line":114,"column":0,"depth":2}},"children":[],"parent":"7kyCk8YAkDvIrxLtAUFkG","data":{}},"body":"<h1 id=\"primer\">Primer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#primer\"></a></h1>\n<p>Interpreted Language</p>\n<p>Object Oriented</p>\n<h2 id=\"built-ins\">Built Ins<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#built-ins\"></a></h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Class</th><th>Desc</th><th>Immutable</th></tr></thead><tbody><tr><td>bool</td><td>boolean value</td><td>True</td></tr><tr><td>int</td><td>integer (arbitrary magnitude)</td><td>True</td></tr><tr><td>float</td><td>floating-point number</td><td>True</td></tr><tr><td>list</td><td>mutable sequence of objects</td><td>False</td></tr><tr><td>tuple</td><td>immutable sequence of objects</td><td>True</td></tr><tr><td>str</td><td>character string</td><td>True</td></tr><tr><td>set</td><td>unordered set of distinct objects</td><td>False</td></tr><tr><td>frozenset</td><td>immutable form of set class</td><td>True</td></tr><tr><td>dict</td><td>associative mapping (aka dictionary)</td><td>False</td></tr></tbody></table></div>\n<h2 id=\"bool\">Bool<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bool\"></a></h2>\n<p>Numbers evaluate to False if 0</p>\n<p>Sequences Strings Lists Dicts to False if empty</p>\n<h2 id=\"int\">int<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#int\"></a></h2>\n<p>The <code>int()</code> constructor returns 0 by default</p>\n<p>int(3.14) -> 3</p>\n<p>int(-123.3) -> -123</p>\n<p>int('5442') -> 5442 : Automatic handling of <code>atoi</code></p>\n<p>int('lol')  -> ValueError</p>\n<p>int('7f',16) -> 127 ->int(strval,base)</p>\n<h2 id=\"float\">float<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#float\"></a></h2>\n<p>fixed-precision representation</p>\n<p>Similar to Double in cpp</p>\n<p>The <code>float()</code> constructor returns 0 by default</p>\n<p>float(2) -> 2.0</p>\n<p>float('3.14') -> 3.14</p>\n<p>float('meh') -> ValueError</p>\n<h2 id=\"sequence-types\">Sequence Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sequence-types\"></a></h2>\n<ul>\n<li><strong>list</strong> -> array</li>\n<li><strong>tuple</strong> -> immutable list</li>\n<li><strong>str</strong> -> immutable sequence of char</li>\n</ul>\n<h3 id=\"list\">list<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#list\"></a></h3>\n<ul>\n<li>Stores sequence of objects</li>\n<li>Referential Structure -> stores sequence of references to its elements</li>\n<li>zero-indexed</li>\n</ul>\n<p>The <code>list()</code> constructor produces empty list [ ] by default</p>\n<p>The <code>list()</code> constructor will accept any parameter that is of <strong>iterable</strong> type</p>\n<p>list('hello') -> [h,e,l,l,o]</p>\n<h2 id=\"set-and-frozenset\">set and frozenset<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#set-and-frozenset\"></a></h2>\n<ul>\n<li>unordered collection of elements without duplicate</li>\n<li>optimized to check existence of elements -> hashtable</li>\n<li>accepts only immutable types</li>\n</ul>\n<p>The <code>set()</code> constructor produces an empty set</p>\n<p>set('hello') -> { h,e,l,o}</p>\n<h2 id=\"dicts\">dicts<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dicts\"></a></h2>\n<p>mapping of distinct keys to associated values</p>\n<h2 id=\"operator-precedence\">Operator precedence<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#operator-precedence\"></a></h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Symbol</th></tr></thead><tbody><tr><td>member access</td><td>expr.member</td></tr><tr><td>function/method calls <br> container subscripts/slices</td><td>expr(...) <br> expr[...]</td></tr><tr><td>exponentiation</td><td>**</td></tr><tr><td>unary operators</td><td>+expr, −expr,  ~expr</td></tr><tr><td>multiplication, division</td><td>*, /, //, %</td></tr><tr><td>addition, subtraction</td><td>+, −</td></tr><tr><td>bitwise shifting</td><td>&#x3C;&#x3C;, >></td></tr><tr><td>bitwise-and</td><td>&#x26;</td></tr><tr><td>bitwise-xor</td><td>ˆ</td></tr><tr><td>bitwise-or</td><td>|</td></tr><tr><td>comparisons <br>  containment</td><td><strong>is</strong>, <strong>is</strong> <strong>not</strong>, ==, !=, &#x3C;, &#x3C;=, >, >= <br> <strong>in</strong>,<strong> not in </strong></td></tr><tr><td>logical-not</td><td><strong>not</strong> expr</td></tr><tr><td>logical-and</td><td><strong>and</strong></td></tr><tr><td>logical-or</td><td><strong>or</strong></td></tr><tr><td>conditional</td><td>val1 <strong>if</strong> cond <strong>else</strong> val2</td></tr><tr><td>assignments</td><td>=, +=, −=, =, etc</td></tr></tbody></table></div>\n<h2 id=\"built-in-functions\">Built-In Functions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#built-in-functions\"></a></h2>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Call Syntax</th><th>Description</th></tr></thead><tbody><tr><td>abs(x)</td><td>Return the absolute value of a number.</td></tr><tr><td>all(iterable)</td><td>Return True if bool(e) is True for each element e.</td></tr><tr><td>any(iterable)</td><td>Return True if bool(e) is True for at least one element e.</td></tr><tr><td>chr(integer)</td><td>Return a one-character string with the given Unicode code point.</td></tr><tr><td>divmod(x, y)</td><td>Return (x // y, x % y) as tuple, if x and y are integers.</td></tr><tr><td>hash(obj)</td><td>Return an integer hash value for the object (see Chapter 10).</td></tr><tr><td>id(obj)</td><td>Return the unique integer serving as an “identity” for the object.</td></tr><tr><td>input(prompt)</td><td>Return a string from standard input; the prompt is optional.</td></tr><tr><td>isinstance(obj, cls)</td><td>Determine if obj is an instance of the class (or a subclass).</td></tr><tr><td>iter(iterable)</td><td>Return a new iterator object for the parameter (see Section 1.8).</td></tr><tr><td>len(iterable)</td><td>Return the number of elements in the given iteration.</td></tr><tr><td>map(f, iter1, iter2, ...)</td><td>Return an iterator yielding the result of function calls f(e1, e2, ...) for respective elements e1 ∈iter1, e2 ∈iter2, ...</td></tr><tr><td>max(iterable)</td><td>Return the largest element of the given iteration.</td></tr><tr><td>max(a, b, c, ...)</td><td>Return the largest of the arguments.</td></tr><tr><td>min(iterable)</td><td>Return the smallest element of the given iteration.</td></tr><tr><td>min(a, b, c, ...)</td><td>Return the smallest of the arguments.</td></tr><tr><td>next(iterator)</td><td>Return the next element reported by the iterator (see Section 1.8).</td></tr><tr><td>open(filename, mode)</td><td>Open a file with the given name and access mode.</td></tr><tr><td>ord(char)</td><td>Return the Unicode code point of the given character.</td></tr><tr><td>pow(x, y)</td><td>Return the value xy (as an integer if x and y are integers);<br> equivalent to x**y.</td></tr><tr><td>pow(x, y, z)</td><td>Return the value (xy mod z) as an integer.</td></tr><tr><td>print(obj1, obj2, ...)</td><td>Print the arguments, with separating spaces and trailing newline.</td></tr><tr><td>range(stop)</td><td>Construct an iteration of values 0, 1, . . . ,  stop −1.</td></tr><tr><td>range(start, stop)</td><td>Construct an iteration of values start, start + 1, . . . ,  stop −1.</td></tr><tr><td>range(start, stop, step)</td><td>Construct an iteration of values start, start + step, start + 2 step, . . .</td></tr><tr><td>reversed(sequence)</td><td>Return an iteration of the sequence in reverse.</td></tr><tr><td>round(x)</td><td>Return the nearest int value (a tie is broken toward the even value).</td></tr><tr><td>round(x, k)</td><td>Return the value rounded to the nearest 10−k (return-type matches x).</td></tr><tr><td>sorted(iterable)</td><td>Return a list containing elements of the iterable in sorted order.</td></tr><tr><td>sum(iterable)</td><td>Return the sum of the elements in the iterable (must be numeric).</td></tr><tr><td>type(obj)</td><td>Return the class to which the instance obj belongs.</td></tr></tbody></table></div>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}