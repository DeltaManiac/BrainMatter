{"pageProps":{"note":{"id":"qiqmYUbwRjOhJPc3wLO3B","title":"Day 5","desc":"","updated":1609223448432,"created":1609222547165,"nav_order":5,"custom":{"nav_order":5},"fname":"aoc.2015.d5","type":"note","vault":{"fsPath":"vault"},"contentHash":"bf5b421cb38e86ff67874e1aeb0a8a57","links":[],"anchors":{"doesnt-he-have-intern-elves-for-this":{"type":"header","text":"Doesn't He Have Intern-Elves For This?","value":"doesnt-he-have-intern-elves-for-this","line":8,"column":0,"depth":2},"part-i":{"type":"header","text":"Part I","value":"part-i","line":10,"column":0,"depth":2},"solution":{"type":"header","text":"Solution","value":"solution","line":36,"column":0,"depth":2},"part-ii":{"type":"header","text":"Part II","value":"part-ii","line":64,"column":0,"depth":2},"solution-1":{"type":"header","text":"Solution","value":"solution-1","line":86,"column":0,"depth":2}},"children":[],"parent":"nR8UBV96SJ5mwTb2gLMzw","data":{}},"body":"<h1 id=\"day-5\">Day 5<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#day-5\"></a></h1>\n<h2 id=\"doesnt-he-have-intern-elves-for-this\">Doesn't He Have Intern-Elves For This?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#doesnt-he-have-intern-elves-for-this\"></a></h2>\n<h2 id=\"part-i\">Part I<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-i\"></a></h2>\n<p>Santa needs help figuring out which strings in his text file are naughty or nice.</p>\n<p>A nice string is one with all of the following properties:</p>\n<blockquote>\n<p>It contains at least three vowels (<code>aeiou</code> only), like <code>aei</code>, <code>xazegov</code>, or <code>aeiouaeiouaeiou</code>.</p>\n<p>It contains at least one letter that appears twice in a row, like <code>xx</code>, <code>abcdde</code> (<code>dd</code>), or <code>aabbccdd</code> (<code>aa</code>, <code>bb</code>, <code>cc</code>, or <code>dd</code>).</p>\n<p>It does not contain the strings <code>ab</code>, <code>cd</code>, <code>pq</code>, or <code>xy</code>, even if they are part of one of the other requirements.</p>\n</blockquote>\n<p>For example:</p>\n<blockquote>\n<p><code>ugknbfddgicrmopn</code> is nice because it has at least three vowels (<code>u...i...o...</code>), a double letter (<code>...dd...</code>), and none of the disallowed substrings.</p>\n<p><code>aaa</code> is nice because it has at least three vowels and a double letter, even though the letters used by different rules overlap.</p>\n<p><code>jchzalrnumimnmhp</code> is naughty because it has no double letter.</p>\n<p><code>haegwjzuvuyypxyu</code> is naughty because it contains the string xy.</p>\n<p><code>dvszwmarrgswjxmb</code> is naughty because it contains only one vowel.</p>\n</blockquote>\n<p>How many strings are nice?</p>\n<h2 id=\"solution\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution\"></a></h2>\n<p>Iterating the input line by line we can pass it through filters which would apply the conditions so as to eliminate all strings that are not <code>nice</code>.</p>\n<p>The answer is the count of all the remaining strings.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[aoc(day5, part1)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part1</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    input\n        <span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>w<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cd\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pq\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> w<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            x<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>c<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token operator\">*</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'a'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'e'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'i'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'o'</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'u'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token operator\">></span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>y<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> c <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> l <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            c<span class=\"token punctuation\">.</span><span class=\"token function\">dedup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            l <span class=\"token operator\">!=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"part-ii\">Part II<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#part-ii\"></a></h2>\n<p>Realizing the error of his ways, Santa has switched to a better model of determining whether a string is naughty or nice. None of the old rules apply, as they are all clearly ridiculous.</p>\n<p>Now, a nice string is one with all of the following properties:</p>\n<blockquote>\n<p>It contains a pair of any two letters that appears at least twice in the string without overlapping, like <code>xyxy</code> (<code>xy</code>) or <code>aabcdefgaa</code> (<code>aa</code>), but not like <code>aaa</code> (<code>aa</code>, but it overlaps).</p>\n<p>It contains at least one letter which repeats with exactly one letter between them, like <code>xyx</code>, <code>abcdefeghi</code> (<code>efe</code>), or even <code>aaa</code>.</p>\n</blockquote>\n<p>For example:</p>\n<blockquote>\n<p><code>qjhvhtzxzqqjkmpb</code> is nice because is has a pair that appears twice (<code>qj</code>) and a letter that repeats with exactly one letter between them (<code>zxz</code>).</p>\n<p><code>xxyxx</code> is nice because it has a pair that appears twice and a letter that repeats with one between, even though the letters used by each rule overlap.</p>\n<p><code>uurcxstgmygtbstg</code> is naughty because it has a pair (<code>tg</code>) but no repeat with a single letter between them.</p>\n<p><code>ieodomkazucvgmuy</code> is naughty because it has a repeating letter with one between (<code>odo</code>), but no pair that appears twice.</p>\n</blockquote>\n<p>How many strings are nice under these new rules?</p>\n<h2 id=\"solution-1\">Solution<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution-1\"></a></h2>\n<p>A recursive function <code>repeat_xx</code> provides the check for condition we then filter out on the strings that match.</p>\n<p>The answer is the count of all the remaining strings after the filters have been applied.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">repeat_xx</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> string<span class=\"token punctuation\">.</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> pair <span class=\"token operator\">=</span> <span class=\"token operator\">&#x26;</span>string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">..</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> remain <span class=\"token operator\">=</span> <span class=\"token operator\">&#x26;</span>string<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    remain<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">repeat_xx</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[aoc(day5, part2)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">part2</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">usize</span> <span class=\"token punctuation\">{</span>\n    input\n        <span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>y<span class=\"token closure-punctuation punctuation\">|</span></span> <span class=\"token function\">repeat_xx</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>z<span class=\"token closure-punctuation punctuation\">|</span></span> z<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span><span class=\"token function\">chars</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token closure-punctuation punctuation\">|</span></span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}