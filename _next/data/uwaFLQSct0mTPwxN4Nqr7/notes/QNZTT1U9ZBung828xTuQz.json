{"pageProps":{"note":{"id":"QNZTT1U9ZBung828xTuQz","title":"Gokit","desc":"","updated":1602916175130,"created":1602916175130,"stub":false,"custom":{"stub":false},"fname":"go.framework.gokit","type":"note","vault":{"fsPath":"vault"},"contentHash":"c1fb02ab62834b987f344ad920a36b47","links":[{"type":"wiki","from":{"fname":"go.framework.gokit","id":"QNZTT1U9ZBung828xTuQz","vaultName":"vault"},"value":"go","position":{"start":{"line":3,"column":32,"offset":41},"end":{"line":3,"column":38,"offset":47},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"go"}},{"type":"wiki","from":{"fname":"go.framework.gokit","id":"QNZTT1U9ZBung828xTuQz","vaultName":"vault"},"value":"go","position":{"start":{"line":56,"column":4,"offset":1175},"end":{"line":56,"column":10,"offset":1181},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"go"}}],"anchors":{"gokit":{"type":"header","text":"Gokit","value":"gokit","line":8,"column":0,"depth":2},"service-layer":{"type":"header","text":"Service Layer","value":"service-layer","line":12,"column":0,"depth":2},"endpoint-layer":{"type":"header","text":"Endpoint Layer","value":"endpoint-layer","line":19,"column":0,"depth":2},"transport-layer":{"type":"header","text":"Transport Layer","value":"transport-layer","line":25,"column":0,"depth":2},"building-a-pastebin-clone":{"type":"header","text":"Building a pastebin clone","value":"building-a-pastebin-clone","line":31,"column":0,"depth":1},"define-a-service-blueprint-interface":{"type":"header","text":"Define a service blueprint interface","value":"define-a-service-blueprint-interface","line":33,"column":0,"depth":2},"make-a-new-struct-to-define-the-pastebin-service":{"type":"header","text":"Make a new struct to define the PasteBin Service","value":"make-a-new-struct-to-define-the-pastebin-service","line":44,"column":0,"depth":2},"implement-the-pbservice-interface-on-the-struct":{"type":"header","text":"Implement the PbService Interface on the struct","value":"implement-the-pbservice-interface-on-the-struct","line":61,"column":0,"depth":2},"request-and-response":{"type":"header","text":"Request and Response","value":"request-and-response","line":101,"column":0,"depth":2},"create-request-response":{"type":"header","text":"Create Request Response","value":"create-request-response","line":107,"column":0,"depth":3},"delete-request-response":{"type":"header","text":"Delete Request Response","value":"delete-request-response","line":120,"column":0,"depth":3},"get-request-response":{"type":"header","text":"Get Request Response","value":"get-request-response","line":133,"column":0,"depth":3},"define-endpoints":{"type":"header","text":"Define Endpoints","value":"define-endpoints","line":146,"column":0,"depth":2},"create-endpoint":{"type":"header","text":"Create Endpoint","value":"create-endpoint","line":150,"column":0,"depth":3},"delete-endpoint":{"type":"header","text":"Delete Endpoint","value":"delete-endpoint","line":165,"column":0,"depth":3},"get-endpoint":{"type":"header","text":"Get Endpoint","value":"get-endpoint","line":180,"column":0,"depth":3},"define-transport":{"type":"header","text":"Define Transport","value":"define-transport","line":195,"column":0,"depth":2},"create-requester-decoder":{"type":"header","text":"Create Requester Decoder","value":"create-requester-decoder","line":199,"column":0,"depth":3},"delete-request-decoder":{"type":"header","text":"Delete Request Decoder","value":"delete-request-decoder","line":211,"column":0,"depth":3},"get-request-decoder":{"type":"header","text":"Get Request Decoder","value":"get-request-decoder","line":223,"column":0,"depth":3},"response-encoder":{"type":"header","text":"Response Encoder","value":"response-encoder","line":235,"column":0,"depth":3},"main":{"type":"header","text":"Main","value":"main","line":245,"column":0,"depth":2},"divide-and-conquer":{"type":"header","text":"Divide and Conquer","value":"divide-and-conquer","line":288,"column":0,"depth":2},"servicego":{"type":"header","text":"service.go","value":"servicego","line":292,"column":0,"depth":3},"transportgo":{"type":"header","text":"transport.go","value":"transportgo","line":353,"column":0,"depth":3},"maingo":{"type":"header","text":"main.go","value":"maingo","line":451,"column":0,"depth":3},"logging-middleware":{"type":"header","text":"Logging Middleware","value":"logging-middleware","line":479,"column":0,"depth":2},"create":{"type":"header","text":"Create","value":"create","line":496,"column":0,"depth":3},"delete":{"type":"header","text":"Delete","value":"delete","line":515,"column":0,"depth":3},"get":{"type":"header","text":"Get","value":"get","line":533,"column":0,"depth":3},"wiring-the-middleware":{"type":"header","text":"Wiring the Middleware","value":"wiring-the-middleware","line":551,"column":0,"depth":2},"pastebin":{"type":"header","text":"PasteBin","value":"pastebin","line":606,"column":0,"depth":2},"client":{"type":"header","text":"Client","value":"client","line":608,"column":0,"depth":3},"server":{"type":"header","text":"Server","value":"server","line":630,"column":0,"depth":3}},"children":[],"parent":"OmHkA6xzHAPClubvCFwQt","data":{}},"body":"<h1 id=\"gokit\">Gokit<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gokit\"></a></h1>\n<h2 id=\"gokit-1\">Gokit<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gokit-1\"></a></h2>\n<p>Spring boot like framework for <a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a>. It has 3 major Components</p>\n<h2 id=\"service-layer\">Service Layer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#service-layer\"></a></h2>\n<ul>\n<li>Innermost layer where business logic resides.</li>\n<li>Modeled as services</li>\n<li>Oblivious to Endpoint/Transport Layers</li>\n<li>Can be used by multiple Transports (grpc/json/http)</li>\n</ul>\n<h2 id=\"endpoint-layer\">Endpoint Layer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#endpoint-layer\"></a></h2>\n<ul>\n<li>Represents a single RPC Method</li>\n<li>Service exposed as an Endpoint</li>\n<li>Endpoint can be exposed by multiple Transports</li>\n</ul>\n<h2 id=\"transport-layer\">Transport Layer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#transport-layer\"></a></h2>\n<ul>\n<li>Exposes various Transports\n<ul>\n<li>grpc</li>\n<li>http</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"building-a-pastebin-clone\">Building a <code>pastebin</code> clone<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#building-a-pastebin-clone\"></a></h1>\n<h2 id=\"define-a-service-blueprint-interface\">Define a service blueprint interface<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#define-a-service-blueprint-interface\"></a></h2>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">// PbService provides storage capabilities</span>\n<span class=\"token keyword\">type</span> PbService <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>content <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>key <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"make-a-new-struct-to-define-the-pastebin-service\">Make a new struct to define the PasteBin Service<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#make-a-new-struct-to-define-the-pastebin-service\"></a></h2>\n<p>This struct is used to group together the functionalities of pastebin service</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> pbService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmemory <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NewPbService make a new PbService</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPbService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> PbService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pbService<span class=\"token punctuation\">{</span>\n\t\tmemory<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"implement-the-pbservice-interface-on-the-struct\">Implement the PbService Interface on the struct<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implement-the-pbservice-interface-on-the-struct\"></a></h2>\n<p>In <a href=\"/notes/96Hj5nYpnUciwlTenFpoU\">Go</a> we do not have a key word to define that this structs implements a specific interface like the <code>implements</code> in Java.</p>\n<p>They way we enforce contracts is by implementing all the methods of the contract interface in our case here its the <code>PbService</code> interface.</p>\n<p>Since our <code>NewPbService</code> method returns the type of <code>PbService</code> the go compiler will ensure that <code>NewPbService</code> confirms to the <code>PbService</code> interface.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token comment\">//Create: Here we store the content and return a uuid</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> content <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> content\n\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Delete: Here we use the key to find and delete the content stored</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid Format\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Get: Here we use the key to find and return the content stored</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid Format\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tcontent<span class=\"token punctuation\">,</span> exists <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"request-and-response\">Request and Response<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-and-response\"></a></h2>\n<p>In Go kit, the primary messaging pattern is RPC.</p>\n<p>So, every method in our interface will be modeled as a remote procedure call. For each method, we define request and response structs, capturing all of the input and output parameters respectively.</p>\n<h3 id=\"create-request-response\">Create Request Response<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#create-request-response\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> createPbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tcontent <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"content\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> createPbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tkey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n\tErr <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"delete-request-response\">Delete Request Response<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#delete-request-response\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> deletePbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tkey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> deletePbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tstatus <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"status\"`</span>\n\tErr    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"get-request-response\">Get Request Response<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#get-request-response\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> getPbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tkey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> getPbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tcontent <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"content\"`</span>\n\tErr     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"define-endpoints\">Define Endpoints<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#define-endpoints\"></a></h2>\n<p>An endpoint represents a single RPC, which is a single method in our service.</p>\n<h3 id=\"create-endpoint\">Create Endpoint<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#create-endpoint\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">createPbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>createPbRequest<span class=\"token punctuation\">)</span>\n\t\tkey<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> createPbResponse<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> createPbResponse<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"delete-endpoint\">Delete Endpoint<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#delete-endpoint\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">deletePbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>deletePbRequest<span class=\"token punctuation\">)</span>\n\t\tstatus<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> deletePbResponse<span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> deletePbResponse<span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"get-endpoint\">Get Endpoint<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#get-endpoint\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getPbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>getPbRequest<span class=\"token punctuation\">)</span>\n\t\tcontent<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> getPbResponse<span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> getPbResponse<span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"define-transport\">Define Transport<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#define-transport\"></a></h2>\n<p>Since this trivial example used JSON over HTTP we would have to decode the JSON to structs that our service can understand</p>\n<h3 id=\"create-requester-decoder\">Create Requester Decoder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#create-requester-decoder\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">decodeCreatePbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request createPbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"delete-request-decoder\">Delete Request Decoder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#delete-request-decoder\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">decodeDeletePbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request deletePbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"get-request-decoder\">Get Request Decoder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#get-request-decoder\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">decodeGetPbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request getPbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"response-encoder\">Response Encoder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#response-encoder\"></a></h3>\n<p>This method would accept an <code>interface</code> type and convert it JSON, this allows it to accept <code>createPbResponse</code>,<code>deletePbResponse</code>,<code>getPbResponse</code> as an <code>interface{}</code> and encode it as json using the annotations in the struct definition.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">encodeResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> response <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"main\">Main<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#main\"></a></h2>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"errors\"</span>\n\t<span class=\"token string\">\"log\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\n\t<span class=\"token string\">\"github.com/go-kit/kit/endpoint\"</span>\n\t<span class=\"token string\">\"github.com/google/uuid\"</span>\n\n\thttptransport <span class=\"token string\">\"github.com/go-kit/kit/transport/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsvc <span class=\"token operator\">:=</span> <span class=\"token function\">NewPbService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcreatePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">createPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeCreatePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tdeletePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">deletePbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeDeletePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tgetPbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">getPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeGetPbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create\"</span><span class=\"token punctuation\">,</span> createPbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">,</span> deletePbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">,</span> getPbHandler<span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"divide-and-conquer\">Divide and Conquer<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#divide-and-conquer\"></a></h2>\n<p>At this point the <code>main.go</code> has a lot of code so lets move to different files so that we have separation of concerns.</p>\n<h3 id=\"servicego\"><code>service.go</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#servicego\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"errors\"</span>\n\n\t<span class=\"token string\">\"github.com/google/uuid\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// PbService provides storage capabilities</span>\n<span class=\"token keyword\">type</span> PbService <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> content <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> pbService <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tmemory <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NewPbService make a new PbService</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">NewPbService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> PbService <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pbService<span class=\"token punctuation\">{</span>\n\t\tmemory<span class=\"token punctuation\">:</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span>uuid<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Create: Here we store the content and return a uuid</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> content <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ts<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> content\n\t<span class=\"token keyword\">return</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Get: Here we use the key to find and return the content stored</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid Format\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\tcontent<span class=\"token punctuation\">,</span> exists <span class=\"token operator\">:=</span> s<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span>\n\t<span class=\"token keyword\">if</span> exists <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//Delete: Here we use the key to find and delete the content stored</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>s pbService<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tid<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid Uuid Format\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>memory<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"transportgo\"><code>transport.go</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#transportgo\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\n\t<span class=\"token string\">\"github.com/go-kit/kit/endpoint\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">type</span> createPbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tContent <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"content\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> createPbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tKey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n\tErr <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> getPbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tKey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> getPbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tContent <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"content\"`</span>\n\tErr     <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> deletePbRequest <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tKey <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"key\"`</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> deletePbResponse <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tStatus <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"status\"`</span>\n\tErr    <span class=\"token builtin\">string</span> <span class=\"token string\">`json:\"err,omitempty\"`</span> <span class=\"token comment\">// errors don't JSON-marshal, so we use a string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">createPbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>createPbRequest<span class=\"token punctuation\">)</span>\n\t\tkey<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> createPbResponse<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> createPbResponse<span class=\"token punctuation\">{</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">deletePbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>deletePbRequest<span class=\"token punctuation\">)</span>\n\t\tstatus<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> deletePbResponse<span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> deletePbResponse<span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">getPbEndpoint</span><span class=\"token punctuation\">(</span>svc PbService<span class=\"token punctuation\">)</span> endpoint<span class=\"token punctuation\">.</span>Endpoint <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> request <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\treq <span class=\"token operator\">:=</span> request<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>getPbRequest<span class=\"token punctuation\">)</span>\n\t\tcontent<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> svc<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> getPbResponse<span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> getPbResponse<span class=\"token punctuation\">{</span>content<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">decodeCreatePbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request createPbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">decodeGetPbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request getPbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">decodeDeletePbRequest</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> r <span class=\"token operator\">*</span>http<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> request deletePbRequest\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewDecoder</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Decode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> request<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"maingo\"><code>main.go</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#maingo\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsvc <span class=\"token operator\">:=</span> <span class=\"token function\">NewPbService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tcreatePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">createPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeCreatePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tdeletePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">deletePbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeDeletePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\tgetPbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">getPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeGetPbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create\"</span><span class=\"token punctuation\">,</span> createPbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">,</span> deletePbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">,</span> getPbHandler<span class=\"token punctuation\">)</span>\n\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">Fatal</span><span class=\"token punctuation\">(</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"logging-middleware\">Logging Middleware<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#logging-middleware\"></a></h2>\n<p>All applications need to log information, this can be enabled by adding a logging middleware that we create in a file called <code>logging.go</code></p>\n<p>Middleware in go-kit work on <code>Endpoint</code></p>\n<p>The interface definition is <code>type Middleware func(Endpoint) Endpoint</code>, which means it is a function that takes in an endpoint and returns an endpoint</p>\n<p>We can create the <code>loggingMiddleware</code> so that it adheres to the <code>PbService</code> by implementing the <code>Create</code> <code>Delete</code> <code>Get</code> methods.</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> loggingMiddleware <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\tlogger log<span class=\"token punctuation\">.</span>Logger\n\tnext   PbService\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"create\">Create<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#create\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m loggingMiddleware<span class=\"token punctuation\">)</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> content <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>output <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// This defered function would be invoked just before the retuen statement</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>begin time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CreatePb\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"err\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"took\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\toutput<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"delete\">Delete<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#delete\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"> <span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m loggingMiddleware<span class=\"token punctuation\">)</span> <span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>output <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>begin time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DeletePb\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"err\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"took\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\toutput<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">Delete</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"get\">Get<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#get\"></a></h3>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>m loggingMiddleware<span class=\"token punctuation\">)</span> <span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> key <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>output <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">defer</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span>begin time<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tm<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>\n\t\t\t<span class=\"token string\">\"method\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GetPb\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"output\"</span><span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"err\"</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token string\">\"took\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span><span class=\"token function\">Since</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\toutput<span class=\"token punctuation\">,</span> err <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"wiring-the-middleware\">Wiring the Middleware<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#wiring-the-middleware\"></a></h2>\n<p>In order to wire the middleware in all we have to do is link it up with the service that we have defined</p>\n<pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"context\"</span>\n\t<span class=\"token string\">\"encoding/json\"</span>\n\t<span class=\"token string\">\"net/http\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\n\t<span class=\"token string\">\"github.com/go-kit/kit/log\"</span>\n\n\thttptransport <span class=\"token string\">\"github.com/go-kit/kit/transport/http\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Use the global logger</span>\n\tlogger <span class=\"token operator\">:=</span> log<span class=\"token punctuation\">.</span><span class=\"token function\">NewLogfmtLogger</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>Stderr<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">var</span> svc PbService\n\tsvc <span class=\"token operator\">=</span> <span class=\"token function\">NewPbService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// Wire the middleware and thats it</span>\n\tsvc <span class=\"token operator\">=</span> loggingMiddleware<span class=\"token punctuation\">{</span>logger<span class=\"token punctuation\">,</span> svc<span class=\"token punctuation\">}</span>\n\n\tcreatePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">createPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeCreatePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tdeletePbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">deletePbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeDeletePbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\n\tgetPbHandler <span class=\"token operator\">:=</span> httptransport<span class=\"token punctuation\">.</span><span class=\"token function\">NewServer</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">getPbEndpoint</span><span class=\"token punctuation\">(</span>svc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tdecodeGetPbRequest<span class=\"token punctuation\">,</span>\n\t\tencodeResponse<span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/create\"</span><span class=\"token punctuation\">,</span> createPbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete\"</span><span class=\"token punctuation\">,</span> deletePbHandler<span class=\"token punctuation\">)</span>\n\thttp<span class=\"token punctuation\">.</span><span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">,</span> getPbHandler<span class=\"token punctuation\">)</span>\n\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"HTTP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"addr\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">)</span>\n\tlogger<span class=\"token punctuation\">.</span><span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"err\"</span><span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">ListenAndServe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\":8080\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">encodeResponse</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">_</span> context<span class=\"token punctuation\">.</span>Context<span class=\"token punctuation\">,</span> w http<span class=\"token punctuation\">.</span>ResponseWriter<span class=\"token punctuation\">,</span> response <span class=\"token keyword\">interface</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span><span class=\"token function\">NewEncoder</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Encode</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"pastebin\">PasteBin<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pastebin\"></a></h2>\n<h3 id=\"client\">Client<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#client\"></a></h3>\n<pre class=\"language-sh\"><code class=\"language-sh\">\n$ curl localhost:8080/create -XPOST -d '{\"content\":\"THIS IS SPARTA\"}'\n\n{\"key\":\"c449250a-d74c-4d23-acbb-6785b0bd822a\"}\n\n$ curl localhost:8080/get -XPOST -d '{\"key\":\"c449250a-d74c-4d23-acbb-6785b0bd822a\"}'\n\n{\"content\":\"THIS IS SPARTA\"}\n\n$ curl localhost:8I00/delete -XPOST -d '{\"key\":\"c449250a-d74c-4d23-acbb-6785b0bd822a\"}'\n\n{\"status\":\"ok\"}\n\n$ curl localhost:8080/get -XPOST -d '{\"key\":\"c449250a-d74c-4d23-acbb-6785b0bd822a\"}'\n\n{\"content\":\"\",\"err\":\"Invalid Uuid\"}\n\n</code></pre>\n<h3 id=\"server\">Server<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#server\"></a></h3>\n<pre class=\"language-sh\"><code class=\"language-sh\">$ ./pastebin-II\n\nmsg=HTTP addr=:8080\n\nmethod=CreatePb input=\"THIS IS SPARTA\" output=c449250a-d74c-4d23-acbb-6785b0bd822a err=null took=67.92µs\n\nmethod=GetPb input=c449250a-d74c-4d23-acbb-6785b0bd822a output=\"THIS IS SPARTA\" err=null took=1.675µs\n\nmethod=DeletePb input=c449250a-d74c-4d23-acbb-6785b0bd822a output=ok err=null took=1.45µs\n\nmethod=GetPb input=c449250a-d74c-4d23-acbb-6785b0bd822a output= err=\"Invalid Uuid\" took=803ns\n</code></pre>","noteIndex":{"id":"root","title":"BrainMatter","desc":"","updated":1668313955403,"created":1602915435296,"stub":false,"nav_order":0,"custom":{"stub":false,"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b584540f5ff09a7953c66d95b7ee329","links":[],"anchors":{},"children":["ovOjtfOpF3vhfFUZi6DHp","3dNch4I3rcDy5xXFn3R6B","BWzIJm01jQ6aNNg56CwnS","96Hj5nYpnUciwlTenFpoU","6Wl0i0BjF7yD85uM5RTyK","o3yahkxofd7qighsrvpg893","7kyCk8YAkDvIrxLtAUFkG","A6TBKYAcFVjBqZpdbHuaS","w3B0c1Y72MfzhwoVNx7vx","t6ilpq115sipjv378ambtkv"],"parent":null,"data":{},"body":"\n\n![DeltaManiac](https://raw.githubusercontent.com/DeltaManiac/DeltaManiac/main/vault/assets/banner.svg)\n\n- 🔭 I’m currently playing Destiny 2\n- 🌱 I’m currently learning [Rust](https://www.rust-lang.org) at night and [Go](https://golang.org/) at work\n- 📫 How to reach me: [twitter](https://twitter.com/Delta_Maniac)\n- 😄 Pronouns: He/Him\n<!-- - ⚡ Fun fact: The banner was provided by [Pushkar Anand](https://github.com/pushkar8723) sourced from [Responsive Cow Jumps Over the Moooooon](https://codepen.io/sdras/pen/doZReX) -->\n<!-- // - 👯 I’m looking to collaborate on ...\n// - 🤔 I’m looking for help with ...\n// - 💬 Ask me about ... -->\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":true,"siteRootDir":"docs","seo":{"title":"BrainMatter","description":"Personal knowledge space","author":"DeltaManiac","twitter":"delta_maniac"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree","editRepository":"https://github.com/DeltaManiac/deltamaniac.github.io"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://deltamaniac.github.io/","hierarchy":{"root":{"publishByDefault":true}},"siteFaviconPath":"favicon.ico","siteIndex":"root"},"generateChangelog":true}},"__N_SSG":true}